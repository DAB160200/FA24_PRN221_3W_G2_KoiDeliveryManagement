// <auto-generated />
using System;
using KoiDeliveryManagement.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KoiDeliveryManagement.Repository.Migrations
{
    [DbContext(typeof(KoiContext))]
    [Migration("20241127014335_Update_27_11_3")]
    partial class Update_27_11_3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorityAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AuthorityContact")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("AuthorityName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AuthorityUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FishId")
                        .HasColumnType("int");

                    b.Property<string>("IssueBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset?>("LastUpdateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FishId")
                        .IsUnique();

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorityAddress = "123 Aqua St, Marine City",
                            AuthorityContact = "123-456-7890",
                            AuthorityName = "Fish Health Organization",
                            AuthorityUrl = "https://fho.example.com",
                            CertificateType = "Health",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8122), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A certificate verifying the health of the fish.",
                            ExpirationDate = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FishId = 1,
                            IssueBy = "Veterinary Authority",
                            IssueDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8122), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Health Certificate",
                            Status = 1,
                            Url = "https://example.com/certificates/health1.pdf"
                        },
                        new
                        {
                            Id = 2,
                            AuthorityAddress = "456 River Lane, Aqua Town",
                            AuthorityContact = "987-654-3210",
                            AuthorityName = "Koi Genetics Authority",
                            AuthorityUrl = "https://kga.example.com",
                            CertificateType = "Genetic",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8128), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Certificate verifying the genetic purity of the fish.",
                            FishId = 2,
                            IssueBy = "Genetics Lab Inc.",
                            IssueDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8128), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Genetic Certificate",
                            Status = 1,
                            Url = "https://example.com/certificates/genetic2.pdf"
                        },
                        new
                        {
                            Id = 3,
                            AuthorityAddress = "789 Coral Reef Rd, Ocean City",
                            AuthorityContact = "456-789-1234",
                            AuthorityName = "International Breeder Council",
                            AuthorityUrl = "https://ibc.example.com",
                            CertificateType = "Origin",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8131), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Certificate verifying the origin and lineage of the fish.",
                            ExpirationDate = new DateTime(2030, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FishId = 3,
                            IssueBy = "Fish Breeder Association",
                            IssueDate = new DateTime(2022, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8131), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Origin Certificate",
                            Status = 1,
                            Url = "https://example.com/certificates/origin3.pdf"
                        });
                });

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeliveryMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DeliveryStaffId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EstimatedArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset?>("LastUpdateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PackageType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrackingCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryStaffId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Deliveries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8226), new TimeSpan(0, 0, 0, 0, 0)),
                            DeliveryMethod = "Standard Delivery",
                            DeliveryStaffId = 4,
                            Description = "Delivering a healthy koi fish to the customer.",
                            EstimatedArrivalDate = new DateTime(2024, 11, 20, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Feedback = "Customer confirmed fish was in good condition upon delivery.",
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8226), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "123 Fish Street, Koi City",
                            OrderId = 1,
                            PackageType = "Standard Box",
                            Rating = 5,
                            Status = 1,
                            TrackingCode = "DEL12345"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8231), new TimeSpan(0, 0, 0, 0, 0)),
                            DeliveryMethod = "Express Delivery",
                            DeliveryStaffId = 4,
                            Description = "Delivering koi fish and maintenance service.",
                            EstimatedArrivalDate = new DateTime(2024, 11, 21, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Feedback = "Customer happy with the fast delivery.",
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8231), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "456 Water Lane, Koi City",
                            OrderId = 2,
                            PackageType = "Insulated Box",
                            Rating = 4,
                            Status = 1,
                            TrackingCode = "DEL67890"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8234), new TimeSpan(0, 0, 0, 0, 0)),
                            DeliveryMethod = "Standard Delivery",
                            DeliveryStaffId = 4,
                            Description = "Delivering koi fish with an issue in packaging.",
                            EstimatedArrivalDate = new DateTime(2024, 11, 22, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Feedback = "Customer reported packaging damage, but fish was unharmed.",
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8234), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "789 Pond Avenue, Koi City",
                            OrderId = 3,
                            PackageType = "Standard Box",
                            Rating = 3,
                            Status = 1,
                            TrackingCode = "DEL11223"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8241), new TimeSpan(0, 0, 0, 0, 0)),
                            DeliveryMethod = "Gift Wrap Delivery",
                            DeliveryStaffId = 4,
                            Description = "Delivering koi fish as a gift.",
                            EstimatedArrivalDate = new DateTime(2024, 11, 23, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Feedback = "Customer excited for the gift delivery.",
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8241), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "101 Fish Lane, Koi City",
                            OrderId = 4,
                            PackageType = "Gift Box",
                            Status = 1,
                            TrackingCode = "DEL44556"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8243), new TimeSpan(0, 0, 0, 0, 0)),
                            DeliveryMethod = "Premium Delivery",
                            DeliveryStaffId = 4,
                            Description = "Delivering a healthy koi fish with premium service.",
                            EstimatedArrivalDate = new DateTime(2024, 11, 24, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Feedback = "Customer highly satisfied with the delivery and fish condition.",
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8243), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "202 Coral Road, Koi City",
                            OrderId = 5,
                            PackageType = "Premium Box",
                            Rating = 5,
                            Status = 1,
                            TrackingCode = "DEL77889"
                        });
                });

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.Fish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("HealthStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float?>("Price")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TagNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Fishes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Breed = "Cyprinus rubrofuscus",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8046), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A beautiful premium koi fish with red and white patterns.",
                            Dob = new DateTime(2022, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HealthStatus = "Healthy",
                            ImageUrl = "https://example.com/images/koi1.jpg",
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8046), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Koi Premium",
                            Price = 120f,
                            Size = 25.5f,
                            Status = 1,
                            SupplierId = 1,
                            TagNumber = "KOI12345",
                            Weight = 1.2f
                        },
                        new
                        {
                            Id = 2,
                            Breed = "Carassius auratus",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8053), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A golden-colored fancy fish, perfect for aquariums.",
                            Dob = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HealthStatus = "Healthy",
                            ImageUrl = "https://example.com/images/golden1.jpg",
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8053), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Golden Fancy",
                            Price = 90f,
                            Size = 18f,
                            Status = 1,
                            SupplierId = 1,
                            TagNumber = "GOLD56789",
                            Weight = 0.8f
                        },
                        new
                        {
                            Id = 3,
                            Breed = "Arowana",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8056), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A rare black dragonfish with elegant movements.",
                            Dob = new DateTime(2021, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HealthStatus = "Excellent",
                            ImageUrl = "https://example.com/images/dragon1.jpg",
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8056), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Black Dragon",
                            Price = 300f,
                            Size = 35f,
                            Status = 1,
                            SupplierId = 2,
                            TagNumber = "DRAGON89012",
                            Weight = 2.5f
                        },
                        new
                        {
                            Id = 4,
                            Breed = "Silver Carp",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8059), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A silver-scaled fish with shimmering beauty.",
                            Dob = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HealthStatus = "Healthy",
                            ImageUrl = "https://example.com/images/silver1.jpg",
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8059), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Silver Stream",
                            Price = 80f,
                            Size = 20f,
                            Status = 1,
                            SupplierId = 2,
                            TagNumber = "SILVER34567",
                            Weight = 1.5f
                        },
                        new
                        {
                            Id = 5,
                            Breed = "Rainbowfish",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8061), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A vibrant fish with a mix of rainbow colors.",
                            Dob = new DateTime(2022, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HealthStatus = "Good",
                            ImageUrl = "https://example.com/images/rainbow1.jpg",
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8061), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Rainbow Delight",
                            Price = 110f,
                            Size = 15f,
                            Status = 1,
                            SupplierId = 1,
                            TagNumber = "RAINBOW12345",
                            Weight = 0.7f
                        });
                });

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("FishId")
                        .HasColumnType("int");

                    b.Property<bool>("IsGift")
                        .HasColumnType("bit");

                    b.Property<string>("IssueReported")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset?>("LastUpdateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentReferenceId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<Guid>("UniqueTrackingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FishId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8176), new TimeSpan(0, 0, 0, 0, 0)),
                            CustomerId = 1,
                            DeliveryDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Feedback = "Amazing service! Everything was perfect.",
                            FishId = 1,
                            IsGift = false,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8176), new TimeSpan(0, 0, 0, 0, 0)),
                            OrderDate = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentReferenceId = "PAY12345",
                            Rating = 5,
                            ServiceId = 1,
                            Status = 1,
                            Total = 15000f,
                            UniqueTrackingId = new Guid("8fa5a796-0073-4e23-8608-ade63800cf28")
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8182), new TimeSpan(0, 0, 0, 0, 0)),
                            CustomerId = 1,
                            DeliveryDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Feedback = "Good service, but delivery was slightly delayed.",
                            FishId = 2,
                            IsGift = true,
                            IssueReported = "Late delivery by 2 hours.",
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8182), new TimeSpan(0, 0, 0, 0, 0)),
                            OrderDate = new DateTime(2024, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentReferenceId = "PAY67890",
                            Rating = 4,
                            ServiceId = 2,
                            Status = 1,
                            Total = 18000f,
                            UniqueTrackingId = new Guid("6931ec33-70b1-47b4-a579-fdb8b6ad07a3")
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8186), new TimeSpan(0, 0, 0, 0, 0)),
                            CustomerId = 1,
                            DeliveryDate = new DateTime(2024, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Feedback = "Fish was healthy but packaging was subpar.",
                            FishId = 3,
                            IsGift = false,
                            IssueReported = "Damaged packaging.",
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8186), new TimeSpan(0, 0, 0, 0, 0)),
                            OrderDate = new DateTime(2024, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentReferenceId = "PAY11223",
                            Rating = 3,
                            ServiceId = 3,
                            Status = 1,
                            Total = 12000f,
                            UniqueTrackingId = new Guid("3db89b34-ed27-4337-a9e6-9e0356ae43f1")
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8189), new TimeSpan(0, 0, 0, 0, 0)),
                            CustomerId = 1,
                            DeliveryDate = new DateTime(2024, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FishId = 4,
                            IsGift = true,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8189), new TimeSpan(0, 0, 0, 0, 0)),
                            OrderDate = new DateTime(2024, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentReferenceId = "PAY44556",
                            ServiceId = 4,
                            Status = 1,
                            Total = 22000f,
                            UniqueTrackingId = new Guid("05bd3a70-47d5-4eb2-8fa4-034df28ee91b")
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8203), new TimeSpan(0, 0, 0, 0, 0)),
                            CustomerId = 1,
                            DeliveryDate = new DateTime(2024, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Feedback = "Fantastic experience! Highly recommend.",
                            FishId = 5,
                            IsGift = false,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8203), new TimeSpan(0, 0, 0, 0, 0)),
                            OrderDate = new DateTime(2024, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentReferenceId = "PAY77889",
                            Rating = 5,
                            ServiceId = 5,
                            Status = 1,
                            Total = 30000f,
                            UniqueTrackingId = new Guid("e5d87956-2d4d-4b63-8f56-393f61665dca")
                        });
                });

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float?>("DiscountPercentage")
                        .HasColumnType("real");

                    b.Property<float>("DurationInHours")
                        .HasColumnType("real");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastUpdateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("ServiceCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TermsAndConditions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Availability = "Weekdays",
                            Category = "Health Check",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8084), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Comprehensive health check for your koi fish to ensure optimal health.",
                            DiscountPercentage = 10f,
                            DurationInHours = 2f,
                            ImageUrl = "https://example.com/images/healthcheck.jpg",
                            IsActive = true,
                            IsFeatured = true,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8084), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Health Check",
                            Price = 50f,
                            Rating = 4.5f,
                            ServiceCode = "HC1001",
                            Status = 1,
                            TermsAndConditions = "Includes health assessment and basic treatment."
                        },
                        new
                        {
                            Id = 2,
                            Availability = "Weekdays",
                            Category = "Maintenance",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8091), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Regular maintenance service to keep your fish tank clean and healthy.",
                            DurationInHours = 3f,
                            ImageUrl = "https://example.com/images/tankmaintenance.jpg",
                            IsActive = true,
                            IsFeatured = false,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8091), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Tank Maintenance",
                            Price = 75f,
                            Rating = 4.7f,
                            ServiceCode = "MT2002",
                            Status = 1,
                            TermsAndConditions = "Includes water cleaning, filter replacement, and plant care."
                        },
                        new
                        {
                            Id = 3,
                            Availability = "Daily",
                            Category = "Feeding",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8094), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Scheduled feeding service to ensure your fish are well-fed.",
                            DiscountPercentage = 5f,
                            DurationInHours = 1f,
                            ImageUrl = "https://example.com/images/feedingservice.jpg",
                            IsActive = true,
                            IsFeatured = false,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8094), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Feeding Service",
                            Price = 30f,
                            Rating = 4.3f,
                            ServiceCode = "FD3003",
                            Status = 1,
                            TermsAndConditions = "Includes feeding and minor tank observations."
                        },
                        new
                        {
                            Id = 4,
                            Availability = "Weekends",
                            Category = "Health Check",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8096), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Specialized treatment services for sick or injured koi fish.",
                            DiscountPercentage = 15f,
                            DurationInHours = 4f,
                            ImageUrl = "https://example.com/images/diseasetreatment.jpg",
                            IsActive = true,
                            IsFeatured = true,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8096), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Disease Treatment",
                            Price = 150f,
                            Rating = 4.8f,
                            ServiceCode = "DT4004",
                            Status = 1,
                            TermsAndConditions = "Includes diagnosis and medication."
                        },
                        new
                        {
                            Id = 5,
                            Availability = "Weekdays",
                            Category = "Setup",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8099), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Professional setup of a new aquarium tailored to your needs.",
                            DiscountPercentage = 20f,
                            DurationInHours = 5f,
                            ImageUrl = "https://example.com/images/aquariumsetup.jpg",
                            IsActive = true,
                            IsFeatured = true,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8099), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Aquarium Setup",
                            Price = 200f,
                            Rating = 4.9f,
                            ServiceCode = "AS5005",
                            Status = 1,
                            TermsAndConditions = "Includes installation and initial maintenance."
                        });
                });

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("LastUpdateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Ocean Drive, Blue City",
                            ContactNumber = "555123456",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8020), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "contact@aquaticwonders.com",
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8020), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Aquatic Wonders",
                            OwnerId = 2,
                            Status = 1,
                            WebsiteUrl = "https://www.aquaticwonders.com"
                        },
                        new
                        {
                            Id = 2,
                            Address = "789 Reef Road, Coral Town",
                            ContactNumber = "555987654",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8025), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "info@marinesupplies.com",
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8025), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Marine Supplies Co.",
                            OwnerId = 2,
                            Status = 1,
                            WebsiteUrl = "https://www.marinesupplies.com"
                        });
                });

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastUpdateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float?>("RefundAmount")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<float?>("TransactionFee")
                        .HasColumnType("real");

                    b.Property<string>("TransactionStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 150f,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8264), new TimeSpan(0, 0, 0, 0, 0)),
                            Currency = "USD",
                            IsSuccessful = true,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8264), new TimeSpan(0, 0, 0, 0, 0)),
                            Notes = "Payment for koi fish and delivery.",
                            OrderId = 1,
                            PaymentId = "PAY12345",
                            PaymentMethod = "Credit Card",
                            Status = 1,
                            TransactionDate = new DateTime(2024, 11, 20, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            TransactionFee = 2.5f,
                            TransactionStatus = "Completed"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 200f,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8269), new TimeSpan(0, 0, 0, 0, 0)),
                            Currency = "USD",
                            IsSuccessful = true,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8269), new TimeSpan(0, 0, 0, 0, 0)),
                            Notes = "Payment for koi fish and service.",
                            OrderId = 2,
                            PaymentId = "PAY67890",
                            PaymentMethod = "PayPal",
                            Status = 1,
                            TransactionDate = new DateTime(2024, 11, 21, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionFee = 3f,
                            TransactionStatus = "Completed"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 180f,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8271), new TimeSpan(0, 0, 0, 0, 0)),
                            Currency = "USD",
                            IsSuccessful = false,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8271), new TimeSpan(0, 0, 0, 0, 0)),
                            Notes = "Payment for koi fish with packaging issue.",
                            OrderId = 3,
                            PaymentId = "PAY11223",
                            PaymentMethod = "Credit Card",
                            RefundAmount = 180f,
                            Status = 1,
                            TransactionDate = new DateTime(2024, 11, 22, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TransactionFee = 2.5f,
                            TransactionStatus = "Failed"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 250f,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8274), new TimeSpan(0, 0, 0, 0, 0)),
                            Currency = "USD",
                            IsSuccessful = true,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8274), new TimeSpan(0, 0, 0, 0, 0)),
                            Notes = "Payment for koi fish gift delivery.",
                            OrderId = 4,
                            PaymentId = "PAY44556",
                            PaymentMethod = "Bank Transfer",
                            Status = 1,
                            TransactionDate = new DateTime(2024, 11, 23, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionFee = 1.5f,
                            TransactionStatus = "Completed"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 300f,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8276), new TimeSpan(0, 0, 0, 0, 0)),
                            Currency = "USD",
                            IsSuccessful = true,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(8276), new TimeSpan(0, 0, 0, 0, 0)),
                            Notes = "Payment for koi fish and premium service.",
                            OrderId = 5,
                            PaymentId = "PAY77889",
                            PaymentMethod = "Credit Card",
                            Status = 1,
                            TransactionDate = new DateTime(2024, 11, 24, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            TransactionFee = 2f,
                            TransactionStatus = "Completed"
                        });
                });

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastUpdateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Role")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(7842), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "customer1@example.com",
                            FullName = "Customer One",
                            IsEmailVerified = true,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(7842), new TimeSpan(0, 0, 0, 0, 0)),
                            PasswordHash = "12345678",
                            PhoneNumber = "123456789",
                            Role = "Customer",
                            Status = 1,
                            Username = "customer1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(7865), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "supplier1@example.com",
                            FullName = "Supplier One",
                            IsEmailVerified = true,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(7865), new TimeSpan(0, 0, 0, 0, 0)),
                            PasswordHash = "12345678",
                            PhoneNumber = "123456789",
                            Role = "Supplier",
                            Status = 1,
                            Username = "supplier1"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(7867), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "staff1@example.com",
                            FullName = "System Staff One",
                            IsEmailVerified = true,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(7867), new TimeSpan(0, 0, 0, 0, 0)),
                            PasswordHash = "12345678",
                            PhoneNumber = "987654321",
                            Role = "SystemStaff",
                            Status = 1,
                            Username = "staff1"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(7869), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "delivery1@example.com",
                            FullName = "Delivery Staff One",
                            IsEmailVerified = true,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(7869), new TimeSpan(0, 0, 0, 0, 0)),
                            PasswordHash = "12345678",
                            PhoneNumber = "567890123",
                            Role = "Delivery",
                            Status = 1,
                            Username = "delivery1"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(7871), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin1@example.com",
                            FullName = "Admin One",
                            IsEmailVerified = true,
                            LastUpdateTime = new DateTimeOffset(new DateTime(2024, 11, 27, 1, 43, 34, 672, DateTimeKind.Unspecified).AddTicks(7871), new TimeSpan(0, 0, 0, 0, 0)),
                            PasswordHash = "12345678",
                            PhoneNumber = "456789012",
                            Role = "Admin",
                            Status = 1,
                            Username = "admin1"
                        });
                });

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.Certificate", b =>
                {
                    b.HasOne("KoiDeliveryManagement.Repository.Model.Fish", "Fish")
                        .WithOne("Certificate")
                        .HasForeignKey("KoiDeliveryManagement.Repository.Model.Certificate", "FishId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fish");
                });

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.Delivery", b =>
                {
                    b.HasOne("KoiDeliveryManagement.Repository.Model.User", "DeliveryStaff")
                        .WithMany("Delivery")
                        .HasForeignKey("DeliveryStaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KoiDeliveryManagement.Repository.Model.Order", "Order")
                        .WithOne("Delivery")
                        .HasForeignKey("KoiDeliveryManagement.Repository.Model.Delivery", "OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DeliveryStaff");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.Fish", b =>
                {
                    b.HasOne("KoiDeliveryManagement.Repository.Model.Supplier", "Supplier")
                        .WithMany("Fishes")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.Order", b =>
                {
                    b.HasOne("KoiDeliveryManagement.Repository.Model.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KoiDeliveryManagement.Repository.Model.Fish", "Fish")
                        .WithMany()
                        .HasForeignKey("FishId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KoiDeliveryManagement.Repository.Model.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Fish");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.Transaction", b =>
                {
                    b.HasOne("KoiDeliveryManagement.Repository.Model.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.Fish", b =>
                {
                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.Order", b =>
                {
                    b.Navigation("Delivery")
                        .IsRequired();
                });

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.Supplier", b =>
                {
                    b.Navigation("Fishes");
                });

            modelBuilder.Entity("KoiDeliveryManagement.Repository.Model.User", b =>
                {
                    b.Navigation("Delivery");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
